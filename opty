#!/usr/bin/env python
"""opty

Usage:
    opty [-s SESSIONS] [-d DESIRES] [-r ROOMS] [-t TIMESLOTS] [-i ITERATIONS] [-S SOLVER]
    opty tournament [-s SESSIONS] [-d DESIRES] [-r ROOMS] [-t TIMESLOTS] [-i ITERATIONS]
    opty test [-s SESSIONS] [-d DESIRES] [-r ROOMS] [-t TIMESLOTS] [-i ITERATIONS] [-S SOLVER]
    opty -l

Options:
    -S SOLVER, --solver SOLVER
                        uses a given solver. Use --list-solvers to display
                        all possible solver names.
                        [default: random]
    -l, --list-solvers  print all possible solver names and quit.
    -s SESSIONS, --sessions SESSIONS
                        path to a yaml file containing a mapping of
                        session names to a list of speaker
                        [default: sessions.yaml]
    -d DESIRES, --desires DESIRES
                        path to a yaml file containing a mapping of
                        users and their desired sessions (ordered
                        by interest, most interesting first)
                        [default: desires.yaml]
    -r ROOMS, --rooms ROOMS
                        path to a yaml file containing room definitions
                        [default: rooms.yaml]
    -t TIMESLOTS, --time-slots TIMESLOTS
                        path to a yaml file containing time slots
                        informations
                        [default: timeslots.yaml]
    -i ITERATIONS, --iterations ITERATIONS
                        Number of iterations to guess a good solution
                        [default: 100000]
    --tournament
                        Run a tournament with all known solvers.
"""

import functools
import yaml
from collections import defaultdict
from docopt import docopt
from solvers import get_solver_by_name, all_solver_names
from clint.textui import progress


def load(filename):
    with open(filename) as fh:
        return yaml.load(fh)


def getRank(solution, desires):
    points = 0
    for user, sessions in desires.items():
        blocked_timeslots = []
        for session, point in zip(sessions,
            # points for sessions even if you have more than 8
            [8, 7, 6, 5, 4, 3, 2, 1] + [1] * max(0, len(sessions) - 8)
        ):
            slot, room = solution[session]
            if slot not in blocked_timeslots:
                blocked_timeslots.append(slot)
                points += point

    return points


def printTimetable(solution):
    timeslots = defaultdict(list)
    for session, (timeslot, room) in solution.items():
        timeslots[timeslot].append((room, session))
    for timeslot in sorted(timeslots.keys()):
        print("%s:" % timeslot)
        for room, session in sorted(timeslots[timeslot]):
            print("   %s: %s" % (room, session))
        print("")

def getBestSolution(iter, expected_iterations):
    for solution in progress.bar(iter):
        pass
    return solution

def main(args):
    sessions = load(args["--sessions"])
    desires = load(args["--desires"])
    rooms = load(args["--rooms"])
    timeslots = load(args["--time-slots"])
    tournament = args["tournament"]
    solver_name = solver = args["--solver"]

    cmp_func = functools.partial(getRank, desires=desires)

    if args["--list-solvers"]:
        for solver_name in all_solver_names():
            print(solver_name)
        return
    elif args["test"]:
        SolverClass = get_solver_by_name(solver)
        with open("%s.testresults" % solver_name, "w") as fh:
            for _ in progress.bar(range(10000)):
                solver = SolverClass(sessions, rooms, timeslots, cmp_func, desires)
                fh.write("%d\n" % cmp_func(solver.solve(args=args)))
        return
    elif tournament:
        print("")
        print("            THE GAME IS ON!!!!")
        print("  THE CHALLENGE RUNS BETWEEN {:2} SOLVERS".format(len(all_solver_names())))
        print("")

        solver_names = all_solver_names()
        first_solver_name = solver_names.pop()
        print("AND THE FIRST CHALLENGER IS: Sir {}".format(first_solver_name))

        best_solver_name = first_solver_name
        iter_solver = get_solver_by_name(first_solver_name)(
            sessions, rooms, timeslots, cmp_func, desires).solve(args=args)
        best_solution = max(progress.bar(iter_solver, expected_size=100000),
            key=cmp_func)
        best_score = cmp_func(best_solution)
        print("  he bats an awesome score of {}".format(best_score))

        for index, solver_name in enumerate(solver_names, 2):
            print("")
            print("AND THE {}. CHALLENGER IS: Sir {}".format(index, solver_name))
            iter_solver = get_solver_by_name(solver_name)(
                sessions, rooms, timeslots, cmp_func, desires).solve(args=args)
            solution = max(progress.bar(iter_solver, expected_size=100000),
            key=cmp_func)
            score = cmp_func(solution)
            print("  with a great score of {}".format(score))

            if best_score < score:
                print("  THE WINNER IS: Sir {}".format(solver_name))
                best_solution = solution
                best_solver_name = solver_name
                best_score = score
            else:
                print("  THE CHAMPION IS UNBEATEN!")

        print("")
        print("THE TOURNAMENT IS OVER!")
        print("A NEW KING HAS BEEN CROWNED")
        print("ALL HAIL King _{}_".format(best_solver_name))

    else:
        solver = get_solver_by_name(solver)(sessions, rooms, timeslots, cmp_func, desires)
        best_solution = solver.solve(args=args)
        print("Points: ", cmp_func(best_solution))
        # printTimetable(best_solution)


    # use simulated annealing
    # https://en.wikipedia.org/wiki/Simulated_annealing
    # possibly not usefull


if __name__ == "__main__":
    args = docopt(__doc__, version="opty-0.1")
    # print(args)
    main(args)
